/** @jsx React.DOM */

var React = require("react");
var Tooltip = require("../js/tooltip.jsx");

// difficulties
// * we can't use a native input, must create our own cursor and interpret
//   keystrokes
// * distinguishing between (m)(g) and (mg)
// * user starts with just numerator, can type "/" to get denominator
// * angstrom, micro- are hard to enter / must be inferred from lookalike
//   letters
// * the numeric input and unit input must be tied together so it's possible to
//   accept an answer expressed in either m or cm, for instance
// * the system must additionally have an understanding of equivalent units
//   - N = kg*m/s^2
//   - mL = mm^3
// * however, it can't accept all equivalent units - it would not be acceptable
//   to use N*s^2/kg instead of m
// * case may or may not be important. i think a lot of units are recognized
//   with either capitalization, but that's probably not always the case.
// * prefixes may or may not be okay
//   - only SI units use them
//   - even then, some aren't really used. cm is common, cL? nah.

// mathquill-inspired
/*
var Cursor = React.createClass({
    render: function() {
        return <span className="units-cursor" />;
    }
});
*/

var siPrefixes = {
    p: 1e-12,
    n: 1e-9,
    u: 1e-6,
    m: 1e-3,
    c: 1e-2,
    d: 1e-1,
    da: 1e1,
    h: 1e2,
    k: 1e3,
};

// this library has a lot of units
// https://github.com/gentooboontoo/js-quantities/blob/master/src/quantities.js

var knownUnits = {
    m: {
        prefixes: ['p', 'n', 'u', 'm', 'c', 'd', 'da', 'h', 'k']
    },
    s: {
        prefixes: ['m']
    },
    g: {
        prefixes: ['m', 'k']
    },
    N: {
        prefixes: ['m', 'k'],
        // equivalences: [
    }
};

var Group = React.createClass({
    render: function() {
        if (this.props.exponent === 1) {
            return <span className="units-group">{this.props.value}</span>;
        } else {
            return <span>
                <span className="units-group">{this.props.value}</span>
                <span className="units-exponent">{this.props.exponent}</span>
            </span>;
        }
    }
});

var UnitHelper = React.createClass({
    render: function() {
        return <div className="units-helper">
            <ul>
                <li>Type "mg" for milligrams</li>
                <li>Type "m g" for meter-grams</li>
                <li>Type "s^2" for seconds squared</li>
                <li>Type "/" to make a denominator</li>
            </ul>
            {/*<div>
                Some common units:
                <ul>
                    <li><a href="javascript: void 0;">kg</a></li>
                    <li><a href="javascript: void 0;">m</a></li>
                    <li><a href="javascript: void 0;">s</a></li>
                    <li><a href="javascript: void 0;">N</a></li>
                    <li><a href="javascript: void 0;">L</a></li>
                    <li><a href="javascript: void 0;">m/s</a></li>
                </ul>
            </div>*/}
        </div>;
    }
});

// props: units, exponents
// state: cursor pos, current input
var UnitSelector = React.createClass({
    render: function() {
        var { numerator, denominator } = this.getGroups();
        numerator = numerator
            .map(group => <Group key={group.value} {...group} />);
        denominator = denominator
            .map(function({ value, exponent }) {
                return { value, exponent: -exponent };
            })
            .map(group => <Group key={group.value} {...group} />);

        var cursorRow = this.state.cursorPos[0] === 0 ?  numerator : denominator;

        cursorRow.splice(this.state.cursorPos[1], 1,
            <input className="units-input"
                   value={this.state.currentInput}
                   onChange={this.handleInputChange} />
        );

        var groups;
        if (this.state.hasDenominator) {
            groups = <div>
                {numerator}
                <hr />
                {denominator}
            </div>
        } else {
            groups = <div>
                {numerator}
            </div>
        }

        return <div className="tooltip-outer">
            <Tooltip show={true}
                     verticalPosition="bottom"
                     horizontalPosition="right"
                     horizontalAlign="left">
                {groups}
                <UnitHelper />
            </Tooltip>
        </div>;
    },

    getGroups: function() {
        var { groups } = this.props;
        return {
            numerator: groups.filter(group => group.exponent > 0),
            denominator: groups.filter(group => group.exponent < 0)
        };
    },

    getInitialState: function() {
        var { numerator, denominator } = this.getGroups();
        return {
            // the end of the numerator
            cursorPos: [0, numerator.length],
            hasDenominator: denominator.length > 0,
            currentInput: ""
        };
    },

    handleInputChange: function(event) {
        this.setState({ currentInput: event.target.value });
    }
});

// module.exports = UnitSelector;

React.renderComponent(
    UnitSelector({
        groups: [
            {value: "kg", exponent: 1},
            {value: "m", exponent: 1},
            {value: "s", exponent: -2}
        ]
    }),
    document.getElementById("inject")
);
